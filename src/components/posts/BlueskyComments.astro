---
interface Props {
    filename: string;
}

// import blueskyJson from "../../assets/_private/state/hiivelabs.com/bluesky_posted.json"
//console.log('BLUESKYTYPE',typeof blueskyJson);

import { getSiteConfig } from "../../scripts/getSiteConfig";
import {getAllKeys} from "../../scripts/keyUtils";
import {KeyType} from "../../scripts/enums";
import { Comments } from "../comments/Comments";
import { getBlueskyPostedJson} from "../../scripts/getBlueskyPostedJson";

const blueskyJson = await getBlueskyPostedJson();
// console.log('blueskyJson', blueskyJson);

const { filename } = Astro.props;
const siteConfig = await getSiteConfig();
const allCategories = getAllKeys(KeyType.Categories);
// console.log(allCategories);
function trimPathToBlog(path: string): string {
    // Remove leading and trailing slashes for consistent splitting
    const trimmedPath = path.replace(/^\/+|\/+$/g, '');
    // Split the path into components using '/' as the separator
    const components = trimmedPath.split('/');

    // Find the index of 'blog' in the components array
    const blogIndex = components.indexOf(siteConfig.blog.path);


    if (blogIndex !== -1) {
        // Slice the array from 'blog' onwards and join back into a path
        const newPathComponents = components.slice(blogIndex);
        // console.log('newPath', newPathComponents.join('/'));
        return newPathComponents.join('/');
    } else {
        // If 'blog' is not found, return the original path or handle as needed
        return trimmedPath;
    }
}


interface BlueskyPostEntry {
    post_id: string;
    post_uri: string;
    post_cid: string;
}

function getBlueskyPostId(originalFilename: string) : string {
    if (!siteConfig.bluesky.include) {
        return null;
    }
    const thisId = trimPathToBlog(originalFilename);
    // console.log('bluesky-id', thisId);
    // Convert the array to a dictionary mapping post_id to post_uri
    const postIdToUriMap: Record<string, string> = blueskyJson.reduce(
        (accumulator: Record<string, string>, entry: BlueskyPostEntry) => {
            accumulator[entry.post_id] = entry.post_uri;
            return accumulator;
        },
        {}
    );
    return thisId in postIdToUriMap ? postIdToUriMap[thisId] : null;
}
const blueskyPostId = getBlueskyPostId(filename);
---
{blueskyPostId != null &&
<hr />
<div>
    <!--{ getBlueskyPostId(filename) }-->
    <Comments
            client:load
            client:only="solid-js"
            atprotoURI={ getBlueskyPostId(filename) }
            handle="kojika.bsky.social"
            categories={allCategories}
    />
</div>}
