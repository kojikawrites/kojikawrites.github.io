---
import {getSiteCode} from "../../scripts/getSiteConfig.ts";
interface Props {
    href: string;
    title: string;
    class?: string;
    showIcon?: boolean;
    showExternal?: boolean;
    showDownload?: boolean;
}

const {
    href,
    title,
    class:className = "",
    showIcon = true,
    showExternal = true,
    showDownload = true,
    ...rest
} = Astro.props;

import toSafeId from "../../scripts/toSafeId.ts";
import SvgLinkIcon from '../../assets/images/shared/external-link.svg'

const placeholderId = toSafeId("svg-placeholder");
const isInternal = !href.includes("://") || href.includes(`//${getSiteCode()}`);

function hasDownloadFileExtension(path: string): boolean {
    // List of common webpage extensions to exclude
    const excludedExtensions = new Set(["html", "htm", "asp", "aspx", "php", "jsp"]);

    // Match the last part of the string after a dot (e.g., ".pdf")
    const match = path.match(/\.([^./]+)$/);

    // Return false if there's no extension or it's a webpage extension
    return match ? !excludedExtensions.has(match[1].toLowerCase()) : false;
}
const isLinkToFile = hasDownloadFileExtension(href);

---
<a href={href}
   class={className}
   title={title}
   target="_blank"
   rel="noopener nofollow noreferrer"
   {...rest}>
    <slot name="link-content"/>
    {showIcon &&
            <slot name="link-icon" />
    }
    {isInternal && isLinkToFile && showDownload &&
            <svg width="12px" height="12px"
                 class="inline relative -top-0.5"
                 viewBox="0 0 54 53" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;">
            <g transform="matrix(1,0,0,1,-25.317,-25.1688)">
                <g transform="matrix(1,0,0,1.14141,-275,-163.663)">
                    <path d="M325.153,202.882C325.227,202.961 326.124,203.778 327.224,203.778C328.324,203.778 329.134,203.053 329.306,202.87L340.434,191.743C341.541,190.636 341.541,188.841 340.435,187.734C339.328,186.626 337.532,186.627 336.426,187.733L330.059,194.099L330.059,168.272C330.059,166.707 328.789,165.437 327.224,165.437C325.659,165.437 324.389,166.707 324.389,168.272L324.389,194.098L318.024,187.733C316.917,186.627 315.122,186.627 314.014,187.733C312.907,188.84 312.907,190.635 314.014,191.743L325.153,202.882Z"
                          style="fill:currentColor;fill-rule:nonzero;"/>
                    <path d="M354.121,196.732L354.121,196.5L354.098,196.5C353.976,195.437 353.084,194.61 351.99,194.61C350.896,194.61 350.004,195.437 349.883,196.5L349.87,196.5L349.87,196.626C349.868,196.665 349.858,196.702 349.858,196.742C349.858,196.782 349.868,196.819 349.87,196.858L349.87,202.083C349.87,204.969 348.214,207.407 346.253,207.407L308.198,207.407C306.237,207.407 304.58,204.969 304.58,202.083L304.58,196.5L304.557,196.5C304.435,195.437 303.543,194.61 302.449,194.61C301.355,194.61 300.464,195.437 300.342,196.5L300.329,196.5L300.329,196.621C300.327,196.662 300.317,196.701 300.317,196.742C300.317,196.783 300.327,196.822 300.329,196.863L300.329,202.083C300.329,207.363 303.86,211.659 308.199,211.659L346.254,211.659C350.593,211.659 354.123,207.363 354.123,202.083L354.123,196.752C354.123,196.749 354.124,196.745 354.124,196.742C354.124,196.739 354.121,196.735 354.121,196.732Z"
                          style="fill:currentColor;fill-rule:nonzero;"/>
                </g>
            </g>
        </svg>
    }
    {showExternal && !isInternal &&
            <span id={placeholderId} class="hidden" />
    }
</a>

<script is:inline define:vars={{placeholderId, SvgLinkIcon}} data-astro-rerun>
    function ensureLinkIcon() {
        import("/scripts/createSvgExternalLinkIcon.js")
            .then(({createSvgExternalLinkIcon}) => {
                async function addSvgExternalLinkIcon() {
                    const span = document.getElementById(placeholderId);
                    const svgElement = await createSvgExternalLinkIcon(SvgLinkIcon);
                    if (span) {
                        span.replaceWith(svgElement);
                    }
                }

                addSvgExternalLinkIcon();
            });
    }
    ensureLinkIcon();
</script>
