---
interface Props {
    alt: string;
    srcList?: Record<string, string>;
    src?: string;
    class?: string;
    id?: string;
}

import getSafeId from '../scripts/toSafeId';
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';
// import { getActiveTheme } from '@client-scripts/theme';

// console.log('getActiveTheme', getActiveTheme());

const {
    alt = "",
    srcList= {},
    src: srcString = "",
    class:className = "",
    id= null,
    ...rest
} = Astro.props;

function buildSrcList(
    srcList: Record<string, string> | undefined,
    src: string | undefined,
    imageGlobs: Record<string, () => Promise<{ default: ImageMetadata }>>,
    availableThemes: string[]
): { [theme: string]: Promise<{ default: ImageMetadata }> } {

    let finalSrcList = {}

    if (src && (!srcList || Object.keys(srcList).length == 0)) {
        // Step 1: We have a src string, but no srcList.
        // We need to construct a srcList by replacing [THEME] with each available theme.
        // console.log("buildSrcList: src", src);
        finalSrcList = availableThemes.reduce((acc, theme: string) => {
            acc[theme] = src.includes('[THEME]')
                ? src.replace('[THEME]', theme)
                : src;
            // console.log('buildSrcList: theme:filename', `${theme}:${filename}`);
            return acc;
        }, {});
    } else if (srcList && !src) {
        // We already have a srcList
        // console.log("buildSrcList: srcList", srcList);
        finalSrcList = srcList;
    } else {
        // Invalid scenario: both or neither provided
        return null;
    }

    // Step 2: Build a new dictionary where each theme is the key, and the value is taken from imageGlobs.
    // finalSrcList keys: theme names, finalSrcList values: filenames
    return Object.fromEntries(
        Object.entries(finalSrcList).map(([theme, filename]) => {
            // Look up the glob from imageGlobs using the filename
            const value = imageGlobs[`${filename}`];
            if (!value) {
                console.warn(`No image glob found for ${filename}`);
            }
            return [theme, value()];
        })
    );
}

function getValueOrFirst<T>(dict: Record<string, Promise<{default: ImageMetadata}>>, key: string): Promise<{default: ImageMetadata}> {
    if (key in dict) {
        return dict[key];
    } else {
        const values = Object.values(dict);
        return values.length > 0 ? values[0] : undefined;
    }
}

const themedImgId = id ?? getSafeId(`themed-image-${className}-${alt}`);
const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/**/*.{jpeg,jpg,png,gif,svg,webp}');
const themedImageGlobs = buildSrcList(srcList, srcString, images, ['dark', 'light'])
// console.log('themedImageGlobs', Object.keys(themedImageGlobs), images);
console.log(themedImgId);
---

<themed-image-data-holder id={getSafeId(id)} data-themed-img-id={themedImgId}>
    {Object.keys(themedImageGlobs).map((theme, _) => (
            <Image id={themedImgId}
                   src={getValueOrFirst(themedImageGlobs, theme)}
                   alt={alt}
                   title={alt}
                   class=`${className} hidden`
                   data-theme={theme}
                   {...rest} />
    ))}
</themed-image-data-holder>
<!-- '/@client-scripts/theme'; //@client-scripts  '/src/scripts/client/theme.ts'; -->
<script>
    import { getActiveTheme } from "../scripts/client/theme";
    class ThemedImageDataHolder extends HTMLElement {
        connectedCallback() {
            // const id = this.id;
            const themedImgId = this.dataset.themedImgId;

            // get values
            function setThemedImage()   {
                var themedImgs = document.querySelectorAll(`[id='${themedImgId}']`);
                const theme = getActiveTheme();
                console.log('ThemedImage.setThemedImage', theme);
                // alert(theme, themedImgId);
                themedImgs.forEach((img: HTMLElement) => {

                    if (theme === img.dataset.theme) {
                        img.classList.remove('hidden');
                    }
                    else {
                        img.classList.add('hidden');
                    }
                    //img.style.display = theme === img.dataset.theme ? 'block': 'none';
                });
                return true;
            }

            // initial set.
            setThemedImage();

            // this should catch theme changes
            window.addEventListener('storage', setThemedImage);


            document.addEventListener("astro:after-swap", setThemedImage);


            // if user hasn't manually set theme, we can respond to system theme
            // set up theming
            const darkModeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
            darkModeMediaQuery.addEventListener('change', () => {
                const themeSet = localStorage.getItem('themeSet');
                console.log('ThemedImage: themeSet', themeSet);
                if (!themeSet) {
                    setThemedImage();
                }
            });
        }
    }

    customElements.define('themed-image-data-holder', ThemedImageDataHolder);
</script>

