---
import { ClientRouter } from 'astro:transitions'

import {getSiteCode} from '../scripts/getSiteConfig'
import StyleHelper from "./StyleHelper.astro";

export interface Props {
    title: string
    description: string
    permalink: string
}

const { title, description, permalink } = Astro.props
const siteCode = getSiteCode();

---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width" />

<link rel="alternate" type="application/rss+xml"
      title={title}
      href={new URL("rss.xml", Astro.site)}
/>
<link rel="sitemap" href=`/sitemap-index.xml` />
<link rel="icon" type="image/x-icon" href=`/favicons/${siteCode}/favicon.ico` />
<link rel="apple-touch-icon" sizes="180x180" href=`/favicons/${siteCode}/apple-touch-icon.png`>
<link rel="icon" type="image/png" sizes="32x32" href=`/favicons/${siteCode}/favicon-32x32.png`>
<link rel="icon" type="image/png" sizes="16x16" href=`/favicons/${siteCode}/favicon-16x16.png`>
<link rel="manifest" href=`/favicons/${siteCode}/site.webmanifest`>

<!-- viewport setting -->
<meta name="viewport" content="width=device-width, initial-scale=1" />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />
<!-- lightbox -->
<script is:inline src="/scripts/prebuilt/spotlight.bundle.js" data-astro-rerun />

<!-- Twitter -->
<!--<meta property="twitter:card" content="summary_large_image" />-->
<!--<meta property="twitter:url" content={permalink} />-->
<!--<meta property="twitter:title" content={title} />-->
<!--<meta property="twitter:description" content={description} />-->
<!--<meta property="twitter:image" content={socialUrl} />-->

<ClientRouter />
<StyleHelper/>

<!-- This is intentionally inlined to avoid FOUC -->
<script is:inline data-astro-rerun>
    // localStorage.clear();
    const darkModeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    function setTheme() {
        const root = document.documentElement;
        let theme = localStorage.getItem('theme');
        const themeSet = localStorage.getItem('themeSet');
        // set up theming
        // if a theme hasn't been manually set, query the system theme.
        if (themeSet !== 'true') {

            if (darkModeMediaQuery.matches) {
                // dark theme on system
                theme = 'dark';
            }
            else {
                // light theme on system
                theme = 'light';
            }
        }
        // set the theme.
        if (theme === 'dark') {
            console.log('Setting dark mode');
            root.classList.add('theme-dark');
        } else {
            console.log('Setting light mode');
            root.classList.remove('theme-dark');
        }
    }
    setTheme();

    window.addEventListener('storage', setTheme)

    // set up theme listener
    function handleThemeChange(e) {
        const root = document.documentElement;
        if (e.matches) {
            console.log('Switched to dark mode');
            root.classList.add('theme-dark');

        } else {
            console.log('Switched to light mode');
            root.classList.remove('theme-dark');
        }
    }
    // if user hasn't manually set theme, we can respond to system theme

    // set up theming
    darkModeMediaQuery.addEventListener('change', (e) => {
        const themeSet = localStorage.getItem('themeSet');
        console.log('BaseHead: themeSet', themeSet);
        if (!themeSet) {
            handleThemeChange(e);
        }
    });

</script>



